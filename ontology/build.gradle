buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'net.sourceforge.owlapi:owlapi-osgidistribution:[5.0.5,5.1)'
        classpath 'net.sourceforge.owlapi:org.semanticweb.hermit:[1.3.8.500,2)'

    }
}


import com.criticollab.bibframe.tools.OWLFormatConvertTask
import com.criticollab.bibframe.tools.ValidateTask
import org.semanticweb.HermiT.Reasoner
import org.semanticweb.HermiT.ReasonerFactory
import org.semanticweb.owlapi.apibinding.OWLManager
import org.semanticweb.owlapi.formats.FunctionalSyntaxDocumentFormat
import org.semanticweb.owlapi.formats.ManchesterSyntaxDocumentFormat
import org.semanticweb.owlapi.formats.RDFXMLDocumentFormat
import org.semanticweb.owlapi.formats.TurtleDocumentFormat
import org.semanticweb.owlapi.model.OWLDataProperty
import org.semanticweb.owlapi.model.OWLObjectProperty
import org.semanticweb.owlapi.model.OWLOntology
import org.semanticweb.owlapi.model.OWLOntologyManager
import org.semanticweb.owlapi.reasoner.InferenceDepth

import java.util.stream.Collectors

ext {
    srcFile = project.file("src/main/resources/bibframe-protege.omn")
}

task test(type: ValidateTask) {
    group = "verification"
    description = "validate OWL"
    file = srcFile
    profile = "OWL2_DL"
}

task build(type: OWLFormatConvertTask, group: "build") {
    dependsOn test
    description "Convert files to different OWL formats"
    src = srcFile
    destDir = new File(buildDir, "owl")
    destDir.mkdirs()
    formats = [new TurtleDocumentFormat(), new ManchesterSyntaxDocumentFormat(), new FunctionalSyntaxDocumentFormat(),
               new RDFXMLDocumentFormat()]
}

task clean {
    doLast {
        project.delete(buildDir)
    }
}

task domainRangeCheck {
    doLast {
        OWLOntologyManager manager = OWLManager.createOWLOntologyManager()
        OWLOntology ontology = manager.loadOntologyFromOntologyDocument(srcFile)
        ReasonerFactory factory = new ReasonerFactory()
       Reasoner reasoner =  factory.createReasoner(ontology)



        def shortnamer
        def format = manager.getOntologyFormat(ontology)
        if (format.prefixOWLDocumentFormat) {
            shortnamer = { x -> format.asPrefixOWLDocumentFormat().getPrefixIRI(x.iri) }
        } else {
            shortnamer = { x -> x.toString() }
        }
        def missingRangeOrDomain = new TreeSet()
        def assertedDomain = [:]
        def assertedRange = [:]
        def pnames = []
        def inferredDomain = [:]                  
        def inferredRange = [:]
        ontology.objectPropertiesInSignature().sorted().forEach {
            OWLObjectProperty op ->
                Set ranges = ontology.objectPropertyRangeAxioms(op).map({x -> x.getRange()}).collect(Collectors.toSet())
                def pname = shortnamer(op)
                pnames += pname
                if (ranges.size() == 0) {
                    //println "${pname} has no asserted range"
                }
                println "$pname : assserted ranges = $ranges"
                assertedRange[pname] = ranges
                ranges = reasoner.getObjectPropertyRanges(op, InferenceDepth.DIRECT).flattened
                inferredRange[pname] = ranges
                println "$pname : inferred ranges = $ranges"

                Set domains = ontology.objectPropertyDomainAxioms(op).map({x -> x.getDomain()}).collect(Collectors.toSet())
                if (domains.size() == 0) {
                  //  println "${pname} has no asserted domain"
                }
                assertedDomain[pname] = domains
                println "$pname : assserted domains = $domains"

                domains = reasoner.getObjectPropertyDomains(op, InferenceDepth.DIRECT).flattened
                inferredDomain[pname] = domains
                println "$pname : inferred domains = $domains"

                return
                
        }
        ontology.dataPropertiesInSignature().sorted().forEach {
            OWLDataProperty dp ->
                Set ranges = ontology.dataPropertyRangeAxioms(dp).map({x -> x.range}).collect(Collectors.toSet())
                def pname = shortnamer(dp)
                pnames += pname
                if (ranges.size() == 0) {
                    //println "${pname} has no asserted range"
                }
                println "$pname : assserted ranges = $ranges"
                assertedRange[pname] = ranges
                Set domains = ontology.dataPropertyDomainAxioms(dp).map({x -> x.domain}).collect(Collectors.toSet())
                if (domains.size() == 0) {
                   // println "${pname} has no asserted domain"
                }
                assertedDomain[pname] = domains
                println "$pname : assserted domains = $domains"

                domains = reasoner.getDataPropertyDomains(dp, InferenceDepth.DIRECT).flattened
                inferredDomain[pname] = domains
                println "$pname : inferred domains = $domains"
                return

        }
        println missingRangeOrDomain
    }
}
